import express from 'express';
import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';
import dotenv from 'dotenv';
import pool from '../models/db.js';
import { authMiddleware } from '../middlewares/auth.js';

dotenv.config();

const router = express.Router();

router.post('/login', async (req, res) => {
  const { email, password } = req.body;

  if (email !== 'admin@example.com') {
    return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π email' });
  }

  try {
    const result = await pool.query('SELECT * FROM admins WHERE email = $1', [email]);

    if (result.rows.length === 0) {
      return res.status(401).json({ message: '–ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const admin = result.rows[0];
    console.log('üîç –í–≤–æ–¥:', password);
    console.log('üß© –•—ç—à –∏–∑ –±–∞–∑—ã:', admin.password_hash);
    
    const isMatch = await bcrypt.compare(password, admin.password_hash);
    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç compare:', isMatch);
    if (!isMatch) {
      return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' });
    }

    const token = jwt.sign(
      { id: admin.id, email: admin.email },
      'my_secret_key_123',
      { expiresIn: '7d' }
    );

    res.cookie('admin_token', token, {
      httpOnly: true,
      sameSite: 'strict',
      secure: false,
      maxAge: 7 * 24 * 60 * 60 * 1000
    });

    res.json({ message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

router.get('/me', authMiddleware, async (req, res) => {
  try {
    const result = await pool.query('SELECT id, email, created_at FROM admins WHERE id = $1', [
      req.admin.id
    ]);
    const admin = result.rows[0];
    res.json({ admin });
  } catch (err) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö' });
  }
});

export default router;
